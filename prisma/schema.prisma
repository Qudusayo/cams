datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  STAFF
  BUSRSER
  LOANANDADVANCE
  HEADOFDEPARTMENT
  AUDITOR
  TREASURER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Form          Form[]
  role          Role      @default(STAFF)
  Status        Status[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FormStatus {
  SUBMITTED
  BURSERENDORSED
  HODENDORSED
  BURSERAPPROVED
  LOANADVANCED
  REJECTED
}

model Form {
  id                     String     @id @default(cuid())
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  owner                  User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                String
  fullname               String
  staffId                String
  department             String
  departmentCode         String
  unit                   String
  dateOfBirth            DateTime
  dateOfFirstAppointment DateTime
  appointmentConfirmed   Boolean
  salaryPerAnnum         Int
  conuass                String
  amount                 Int
  dateToRetireAdvance    DateTime
  purpose                String
  status                 FormStatus @default(SUBMITTED)
  requestNo              Int        @default(autoincrement())
  statuses               Status[]
}

model Status {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  status    FormStatus
  Form      Form       @relation(fields: [formId], references: [id])
  formId    String
  updatedBy User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
